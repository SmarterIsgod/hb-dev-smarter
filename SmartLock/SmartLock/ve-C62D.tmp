using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using Styx;
using Styx.Combat.CombatRoutine;
using Styx.Helpers;
using Styx.Logic;
using Styx.Logic.Combat;
using Styx.Logic.Pathing;
using Styx.WoWInternals;
using Styx.WoWInternals.WoWObjects;
using System.Drawing;

namespace SmartLock
{
    public class Spells
    {
        public static WoWSpell SummonFelguard { get { return WoWSpell.FromId(30146); } }
        public static WoWSpell FelArmor { get { return WoWSpell.FromId(28176); } }
        public static WoWSpell SoulLink { get { return WoWSpell.FromId(19028); } }
        public static WoWSpell LifeTap { get { return WoWSpell.FromId(1454); } }
        public static WoWSpell ShadowBolt { get { return WoWSpell.FromId(686); } }
        public static WoWSpell HealthFunnel { get { return WoWSpell.FromId(755); } }
        public static WoWSpell BaneOfDoom { get { return WoWSpell.FromId(603); } }
        public static WoWSpell CurseOfElements { get { return WoWSpell.FromId(1490); } }
        public static WoWSpell Immolate { get { return WoWSpell.FromId(348); } }
        public static WoWSpell SoulFire { get { return WoWSpell.FromId(6353); } }
        public static WoWSpell DemonicEmp { get { return WoWSpell.FromId(47193); } }
        public static WoWSpell DrainLife { get { return WoWSpell.FromId(689); } }
        public static WoWSpell DrainSoul { get { return WoWSpell.FromId(1120); } }
        public static WoWSpell AxeToss { get { return WoWSpell.FromId(89766); }}
        public static WoWSpell Felstorm { get { return WoWSpell.FromId(89751); }}



        public static bool NeedBuff(WoWSpell spell)
        {
            var auras = SmartLock.Me.GetAllAuras();
            if (auras.Exists(a => a.SpellId == spell.Id))
                return false;
            return true;
        }

        public static void PetCast(WoWSpell spell)
        {
            if (spell.CanCast && !spell.Cooldown && !SmartLock.Me.Pet.IsCasting && !SmartLock.Me.Pet.Stunned)
            {
                spell.Cast();
            }
            else
            {
                SmartLock.Debug("Cannot Cast Pet Spell: [0]", spell.Name);
            }

        }
        public static void CastSpell(WoWSpell spell)
        {
            if (spell.CanCast && !spell.Cooldown && !SmartLock.Me.IsCasting)
            {
                if (!SmartLock.Me.IsFacing(SmartLock.Me.CurrentTarget))
                    SmartLock.Me.CurrentTarget.Face();
                spell.Cast();
            }
            else
            {
                SmartLock.Debug("Cannot Cast [0]", spell.Name);
            }
        }
    }
}
